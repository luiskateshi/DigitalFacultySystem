@page "/"
@using System.Globalization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager

<PageTitle>Faqja Kryesore</PageTitle>

<div class="container">
    <div class="row justify-content-center mt-5">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h1 class="display-4 text-center mb-4">Mirësevini në Platformën e Fakultetit Dixhital</h1>
                    <p class="lead text-center mb-5">Sot është @GetAlbanianDate()</p>

                    <!-- Kontrolloni nëse përdoruesi është autentifikuar -->
                    <AuthorizeView>

                        <Authorized>
                            <h2 class="text-center">Përshëndetje, @context.User.Identity!.Name!</h2>
                            <!--<p class="text-center">ID juaj është @UserId</p>-->
                            <p class="text-center">Roli juaj është: @UserRole</p>
                            <!-- Opsion për të shkuar te faqja e ndryshimit të fjalëkalimit -->
                            <div class="text-center mt-3">
                                <button class="btn btn-primary" @onclick="GoToChangePassword">Ndrysho Fjalëkalimin</button>
                            </div>
                        </Authorized>
                        <NotAuthorized>
                            <h2 class="text-center">Përshëndetje, Vizitor!</h2>
                            <p class="text-center">Ju lutemi identifikohuni për të aksesuar më shumë funksionalitete.</p>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string UserId { get; set; }
    private string UserRole { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authenticationState.User;

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        UserId = userIdClaim?.Value;

        UserRole = user.FindFirst(ClaimTypes.Role)?.Value;
    }

    private void GoToChangePassword()
    {
        NavManager.NavigateTo("/changePassword");
    }
    private string GetAlbanianDate()
    {
        var date = DateTime.Now;
        var dayOfWeek = date.ToString("dddd", new CultureInfo("en-US"));
        var month = date.ToString("MMMM", new CultureInfo("en-US"));
        var day = date.Day;
        var year = date.Year;

        var daysOfWeekAlbanian = new Dictionary<string, string>
        {
            { "Monday", "E hënë" },
            { "Tuesday", "E martë" },
            { "Wednesday", "E mërkurë" },
            { "Thursday", "E enjte" },
            { "Friday", "E premte" },
            { "Saturday", "E shtunë" },
            { "Sunday", "E diel" }
        };

        var monthsAlbanian = new Dictionary<string, string>
        {
            { "January", "Janar" },
            { "February", "Shkurt" },
            { "March", "Mars" },
            { "April", "Prill" },
            { "May", "Maj" },
            { "June", "Qershor" },
            { "July", "Korrik" },
            { "August", "Gusht" },
            { "September", "Shtator" },
            { "October", "Tetor" },
            { "November", "Nëntor" },
            { "December", "Dhjetor" }
        };

        return $"{daysOfWeekAlbanian[dayOfWeek]}, {monthsAlbanian[month]} {day}, {year}";
    }
}
