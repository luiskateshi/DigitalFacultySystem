@page "/changePassword"
@inject IUserAccount AccountService
@inject IJSRuntime js
@using DigitalFacultySystem.Entities.Dtos.SecurityDtos
@using DigitalFacultySystem.DataService.Repositories.Interfaces
@using System.Threading.Tasks
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Admin")]

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg">
                <!-- Added shadow-lg for nice shadow effect -->
                <div class="card-header text-center bg-primary text-white">
                    <h3>Change Password</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="ChangePasswordModel" OnValidSubmit="ChangePassword">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Current Password</label>
                            <div class="input-group">
                                <input @bind="ChangePasswordModel.CurrentPassword" id="currentPassword" class="form-control" type="@currentPasswordInputType" placeholder="Enter your current password" required />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => TogglePasswordVisibility(1)">
                                    @currentPasswordButtonText
                                </button>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="newPassword" class="form-label">New Password</label>
                            <div class="input-group">
                                <input @bind="ChangePasswordModel.NewPassword" id="newPassword" class="form-control" type="@newPasswordInputType" placeholder="Enter your new password" required />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => TogglePasswordVisibility(2)">
                                    @newPasswordButtonText
                                </button>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <div class="input-group">
                                <input @bind="ChangePasswordModel.ConfirmPassword" id="confirmPassword" class="form-control" type="@confirmPasswordInputType" placeholder="Confirm your new password" required />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => TogglePasswordVisibility(3)">
                                    @confirmPasswordButtonText
                                </button>
                            </div>
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-primary">Change Password</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public ChangePassDto ChangePasswordModel { get; set; } = new ChangePassDto();
    public string UserId { get; set; }

    private bool isCurrentPasswordVisible = false;
    private string currentPasswordInputType => isCurrentPasswordVisible ? "text" : "password";
    private string currentPasswordButtonText => isCurrentPasswordVisible ? "Hide" : "Show";

    private bool isNewPasswordVisible = false;
    private string newPasswordInputType => isNewPasswordVisible ? "text" : "password";
    private string newPasswordButtonText => isNewPasswordVisible ? "Hide" : "Show";

    private bool isConfirmPasswordVisible = false;
    private string confirmPasswordInputType => isConfirmPasswordVisible ? "text" : "password";
    private string confirmPasswordButtonText => isConfirmPasswordVisible ? "Hide" : "Show";

    void TogglePasswordVisibility(int inputId)
    {
        if (inputId == 1)
        {
            isCurrentPasswordVisible = !isCurrentPasswordVisible;
        }
        else if (inputId == 2)
        {
            isNewPasswordVisible = !isNewPasswordVisible;
        }
        else if (inputId == 3)
        {
            isConfirmPasswordVisible = !isConfirmPasswordVisible;
        }
    }

    async Task ChangePassword()
    {
        // Check if password and confirm password match
        if (ChangePasswordModel.NewPassword != ChangePasswordModel.ConfirmPassword)
        {
            await js.InvokeVoidAsync("alert", "Password and Confirm Password must match.");
            return;
        }

        // Retrieve user ID from authentication state
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        UserId = userIdClaim?.Value;

        // Call the service method to change password
        var response = await AccountService.ChangePassword(UserId, ChangePasswordModel.CurrentPassword, ChangePasswordModel.NewPassword);

        // Display response message
        if (response.Flag)
        {
            await js.InvokeVoidAsync("alert", "Password changed successfully");
            // Optionally, navigate to another page after successful password change
        }
        else
        {
            await js.InvokeVoidAsync("alert", response.Message);
        }
    }
}
