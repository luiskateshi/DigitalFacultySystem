// <auto-generated />
using System;
using DigitalFacultySystem.DataService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitalFacultySystem.DataService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240515201319_DB Update 10")]
    partial class DBUpdate10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.AcademicYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_AcademicYears_Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LabLecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MainLecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("SecondLecturerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudyPlanSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LabLecturerId");

                    b.HasIndex("MainLecturerId");

                    b.HasIndex("SecondLecturerId");

                    b.HasIndex("StudyPlanSubjectId");

                    b.HasIndex(new[] { "Name" }, "IX_Courses_Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.CourseAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LabHoursAttended")
                        .HasColumnType("int");

                    b.Property<int?>("SeminarHoursAttended")
                        .HasColumnType("int");

                    b.Property<Guid?>("StudentInCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isAttended")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("StudentInCourseId");

                    b.ToTable("CourseAttendances");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.DegreeProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StudyLength")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex(new[] { "Name" }, "IX_DegreePrograms_Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("DegreePrograms");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Departments_Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<Guid?>("ExamSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PlanSubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExamSessionId");

                    b.HasIndex("PlanSubjectId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.ExamRetakeRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("DateOfRequest")
                        .HasColumnType("date");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExamsSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ExamId");

                    b.HasIndex("ExamsSessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExamRetakeRequests");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.ExamsSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcademicYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex(new[] { "EndDate" }, "IX_ExamsSessions_EndDate");

                    b.HasIndex(new[] { "StartDate" }, "IX_ExamsSessions_StartDate");

                    b.ToTable("ExamsSessions");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Generation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentSemesterOfStudies")
                        .HasColumnType("int");

                    b.Property<Guid?>("DegreeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("StartAcademicYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudyPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DegreeId");

                    b.HasIndex("StartAcademicYearId");

                    b.HasIndex("StudyPlanId");

                    b.HasIndex(new[] { "Name" }, "IX_Generations_Name")
                        .IsUnique();

                    b.ToTable("Generations");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GenerationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GenerationId");

                    b.HasIndex(new[] { "Name" }, "IX_Groups_Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Lecturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DegreeProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdCard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DegreeProgramId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ApplicationUserId" }, "IX_Students_UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Students_UserId1")
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudentInCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcademicYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentInCoursees");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudentsInExam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Attended")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExamGrade")
                        .HasColumnType("int");

                    b.Property<Guid?>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentsInExams");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudentsInGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.ToTable("StudentsInGroups");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudyPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DegreeProgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DegreeProgId");

                    b.HasIndex(new[] { "Name" }, "IX_StudyPlans_Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("StudyPlans");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudyPlanSubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreditsNo")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Semester")
                        .HasColumnType("int");

                    b.Property<Guid?>("StudyPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TotalHoursLab")
                        .HasColumnType("int");

                    b.Property<int?>("TotalHoursLectures")
                        .HasColumnType("int");

                    b.Property<int?>("TotalHoursSeminars")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("StudyPlanId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudyPlanSubjects");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Syllabus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Subjects_Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("DigitalFacultySystem.Entities.DbSet.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "IX_ApplicationUsers_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Course", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.Lecturer", "LabLecturer")
                        .WithMany()
                        .HasForeignKey("LabLecturerId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.Lecturer", "MainLecturer")
                        .WithMany()
                        .HasForeignKey("MainLecturerId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.Lecturer", "SecondLecturer")
                        .WithMany()
                        .HasForeignKey("SecondLecturerId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.StudyPlanSubject", "StudyPlanSubject")
                        .WithMany("Courses")
                        .HasForeignKey("StudyPlanSubjectId");

                    b.Navigation("LabLecturer");

                    b.Navigation("MainLecturer");

                    b.Navigation("SecondLecturer");

                    b.Navigation("StudyPlanSubject");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.CourseAttendance", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.StudentInCourse", "StudentInCourse")
                        .WithMany("CourseAttendances")
                        .HasForeignKey("StudentInCourseId");

                    b.Navigation("StudentInCourse");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.DegreeProgram", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.Department", "Department")
                        .WithMany("DegreePrograms")
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Exam", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.ExamsSession", "ExamSession")
                        .WithMany("Exams")
                        .HasForeignKey("ExamSessionId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.StudyPlanSubject", "PlanSubject")
                        .WithMany("Exams")
                        .HasForeignKey("PlanSubjectId");

                    b.Navigation("ExamSession");

                    b.Navigation("PlanSubject");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.ExamRetakeRequest", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.Course", null)
                        .WithMany("ExamRetakeRequests")
                        .HasForeignKey("CourseId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.ExamsSession", null)
                        .WithMany("ExamRetakeRequests")
                        .HasForeignKey("ExamsSessionId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.Student", "Student")
                        .WithMany("ExamRetakeRequests")
                        .HasForeignKey("StudentId");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.ExamsSession", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.AcademicYear", "AcademicYear")
                        .WithMany("ExamsSessions")
                        .HasForeignKey("AcademicYearId");

                    b.Navigation("AcademicYear");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Generation", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.DegreeProgram", "Degree")
                        .WithMany("Generations")
                        .HasForeignKey("DegreeId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.AcademicYear", "StartAcademicYear")
                        .WithMany("Generations")
                        .HasForeignKey("StartAcademicYearId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.StudyPlan", "StudyPlan")
                        .WithMany("Generations")
                        .HasForeignKey("StudyPlanId");

                    b.Navigation("Degree");

                    b.Navigation("StartAcademicYear");

                    b.Navigation("StudyPlan");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Group", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.Generation", "Generation")
                        .WithMany("Groups")
                        .HasForeignKey("GenerationId");

                    b.Navigation("Generation");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Student", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.DegreeProgram", "DegreeProgram")
                        .WithMany()
                        .HasForeignKey("DegreeProgramId");

                    b.HasOne("DigitalFacultySystem.Entities.DbSet.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DegreeProgram");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudentInCourse", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.AcademicYear", "AcademicYear")
                        .WithMany("StudentInCourses")
                        .HasForeignKey("AcademicYearId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.Course", "Course")
                        .WithMany("StudentInCourses")
                        .HasForeignKey("CourseId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.Student", "Student")
                        .WithMany("StudentInCourses")
                        .HasForeignKey("StudentId");

                    b.Navigation("AcademicYear");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudentsInExam", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.Exam", "Exam")
                        .WithMany("StudentsInExams")
                        .HasForeignKey("ExamId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.Student", "Student")
                        .WithMany("StudentsInExams")
                        .HasForeignKey("StudentId");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudentsInGroup", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.Group", "Group")
                        .WithMany("StudentsInGroups")
                        .HasForeignKey("GroupId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.Student", "Student")
                        .WithOne("StudentsInGroup")
                        .HasForeignKey("DigitalFacultySystem.Domain.Entities.StudentsInGroup", "StudentId");

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudyPlan", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.DegreeProgram", "DegreeProg")
                        .WithMany("StudyPlans")
                        .HasForeignKey("DegreeProgId");

                    b.Navigation("DegreeProg");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudyPlanSubject", b =>
                {
                    b.HasOne("DigitalFacultySystem.Domain.Entities.StudyPlan", "StudyPlan")
                        .WithMany("StudyPlanSubjects")
                        .HasForeignKey("StudyPlanId");

                    b.HasOne("DigitalFacultySystem.Domain.Entities.Subject", "Subject")
                        .WithMany("StudyPlanSubjects")
                        .HasForeignKey("SubjectId");

                    b.Navigation("StudyPlan");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DigitalFacultySystem.Entities.DbSet.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DigitalFacultySystem.Entities.DbSet.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalFacultySystem.Entities.DbSet.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DigitalFacultySystem.Entities.DbSet.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.AcademicYear", b =>
                {
                    b.Navigation("ExamsSessions");

                    b.Navigation("Generations");

                    b.Navigation("StudentInCourses");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Course", b =>
                {
                    b.Navigation("ExamRetakeRequests");

                    b.Navigation("StudentInCourses");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.DegreeProgram", b =>
                {
                    b.Navigation("Generations");

                    b.Navigation("StudyPlans");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Department", b =>
                {
                    b.Navigation("DegreePrograms");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Exam", b =>
                {
                    b.Navigation("StudentsInExams");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.ExamsSession", b =>
                {
                    b.Navigation("ExamRetakeRequests");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Generation", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Group", b =>
                {
                    b.Navigation("StudentsInGroups");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Student", b =>
                {
                    b.Navigation("ExamRetakeRequests");

                    b.Navigation("StudentInCourses");

                    b.Navigation("StudentsInExams");

                    b.Navigation("StudentsInGroup");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudentInCourse", b =>
                {
                    b.Navigation("CourseAttendances");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudyPlan", b =>
                {
                    b.Navigation("Generations");

                    b.Navigation("StudyPlanSubjects");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.StudyPlanSubject", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("DigitalFacultySystem.Domain.Entities.Subject", b =>
                {
                    b.Navigation("StudyPlanSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
